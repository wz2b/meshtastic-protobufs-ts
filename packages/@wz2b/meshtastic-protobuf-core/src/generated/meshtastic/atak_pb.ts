// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=js"
// @generated from file meshtastic/atak.proto (package meshtastic, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file meshtastic/atak.proto.
 */
export const file_meshtastic_atak: GenFile = /*@__PURE__*/
  fileDesc("ChVtZXNodGFzdGljL2F0YWsucHJvdG8SCm1lc2h0YXN0aWMi+AEKCVRBS1BhY2tldBIVCg1pc19jb21wcmVzc2VkGAEgASgIEiQKB2NvbnRhY3QYAiABKAsyEy5tZXNodGFzdGljLkNvbnRhY3QSIAoFZ3JvdXAYAyABKAsyES5tZXNodGFzdGljLkdyb3VwEiIKBnN0YXR1cxgEIAEoCzISLm1lc2h0YXN0aWMuU3RhdHVzEh4KA3BsaRgFIAEoCzIPLm1lc2h0YXN0aWMuUExJSAASIwoEY2hhdBgGIAEoCzITLm1lc2h0YXN0aWMuR2VvQ2hhdEgAEhAKBmRldGFpbBgHIAEoDEgAQhEKD3BheWxvYWRfdmFyaWFudCJcCgdHZW9DaGF0Eg8KB21lc3NhZ2UYASABKAkSDwoCdG8YAiABKAlIAIgBARIYCgt0b19jYWxsc2lnbhgDIAEoCUgBiAEBQgUKA190b0IOCgxfdG9fY2FsbHNpZ24iTQoFR3JvdXASJAoEcm9sZRgBIAEoDjIWLm1lc2h0YXN0aWMuTWVtYmVyUm9sZRIeCgR0ZWFtGAIgASgOMhAubWVzaHRhc3RpYy5UZWFtIhkKBlN0YXR1cxIPCgdiYXR0ZXJ5GAEgASgNIjQKB0NvbnRhY3QSEAoIY2FsbHNpZ24YASABKAkSFwoPZGV2aWNlX2NhbGxzaWduGAIgASgJIl8KA1BMSRISCgpsYXRpdHVkZV9pGAEgASgPEhMKC2xvbmdpdHVkZV9pGAIgASgPEhAKCGFsdGl0dWRlGAMgASgFEg0KBXNwZWVkGAQgASgNEg4KBmNvdXJzZRgFIAEoDSrAAQoEVGVhbRIUChBVbnNwZWNpZmVkX0NvbG9yEAASCQoFV2hpdGUQARIKCgZZZWxsb3cQAhIKCgZPcmFuZ2UQAxILCgdNYWdlbnRhEAQSBwoDUmVkEAUSCgoGTWFyb29uEAYSCgoGUHVycGxlEAcSDQoJRGFya19CbHVlEAgSCAoEQmx1ZRAJEggKBEN5YW4QChIICgRUZWFsEAsSCQoFR3JlZW4QDBIOCgpEYXJrX0dyZWVuEA0SCQoFQnJvd24QDip/CgpNZW1iZXJSb2xlEg4KClVuc3BlY2lmZWQQABIOCgpUZWFtTWVtYmVyEAESDAoIVGVhbUxlYWQQAhIGCgJIURADEgoKBlNuaXBlchAEEgkKBU1lZGljEAUSEwoPRm9yd2FyZE9ic2VydmVyEAYSBwoDUlRPEAcSBgoCSzkQCEJfChNjb20uZ2Vla3N2aWxsZS5tZXNoQgpBVEFLUHJvdG9zWiJnaXRodWIuY29tL21lc2h0YXN0aWMvZ28vZ2VuZXJhdGVkqgIUTWVzaHRhc3RpYy5Qcm90b2J1ZnO6AgBiBnByb3RvMw");

/**
 *
 * Packets for the official ATAK Plugin
 *
 * @generated from message meshtastic.TAKPacket
 */
export type TAKPacket = Message<"meshtastic.TAKPacket"> & {
  /**
   *
   * Are the payloads strings compressed for LoRA transport?
   *
   * @generated from field: bool is_compressed = 1;
   */
  isCompressed: boolean;

  /**
   *
   * The contact / callsign for ATAK user
   *
   * @generated from field: meshtastic.Contact contact = 2;
   */
  contact?: Contact;

  /**
   *
   * The group for ATAK user
   *
   * @generated from field: meshtastic.Group group = 3;
   */
  group?: Group;

  /**
   *
   * The status of the ATAK EUD
   *
   * @generated from field: meshtastic.Status status = 4;
   */
  status?: Status;

  /**
   *
   * The payload of the packet
   *
   * @generated from oneof meshtastic.TAKPacket.payload_variant
   */
  payloadVariant: {
    /**
     *
     * TAK position report
     *
     * @generated from field: meshtastic.PLI pli = 5;
     */
    value: PLI;
    case: "pli";
  } | {
    /**
     *
     * ATAK GeoChat message
     *
     * @generated from field: meshtastic.GeoChat chat = 6;
     */
    value: GeoChat;
    case: "chat";
  } | {
    /**
     *
     * Generic CoT detail XML
     * May be compressed / truncated by the sender (EUD)
     *
     * @generated from field: bytes detail = 7;
     */
    value: Uint8Array;
    case: "detail";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message meshtastic.TAKPacket.
 * Use `create(TAKPacketSchema)` to create a new message.
 */
export const TAKPacketSchema: GenMessage<TAKPacket> = /*@__PURE__*/
  messageDesc(file_meshtastic_atak, 0);

/**
 *
 * ATAK GeoChat message
 *
 * @generated from message meshtastic.GeoChat
 */
export type GeoChat = Message<"meshtastic.GeoChat"> & {
  /**
   *
   * The text message
   *
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   *
   * Uid recipient of the message
   *
   * @generated from field: optional string to = 2;
   */
  to?: string;

  /**
   *
   * Callsign of the recipient for the message
   *
   * @generated from field: optional string to_callsign = 3;
   */
  toCallsign?: string;
};

/**
 * Describes the message meshtastic.GeoChat.
 * Use `create(GeoChatSchema)` to create a new message.
 */
export const GeoChatSchema: GenMessage<GeoChat> = /*@__PURE__*/
  messageDesc(file_meshtastic_atak, 1);

/**
 *
 * ATAK Group
 * <__group role='Team Member' name='Cyan'/>
 *
 * @generated from message meshtastic.Group
 */
export type Group = Message<"meshtastic.Group"> & {
  /**
   *
   * Role of the group member
   *
   * @generated from field: meshtastic.MemberRole role = 1;
   */
  role: MemberRole;

  /**
   *
   * Team (color)
   * Default Cyan
   *
   * @generated from field: meshtastic.Team team = 2;
   */
  team: Team;
};

/**
 * Describes the message meshtastic.Group.
 * Use `create(GroupSchema)` to create a new message.
 */
export const GroupSchema: GenMessage<Group> = /*@__PURE__*/
  messageDesc(file_meshtastic_atak, 2);

/**
 *
 * ATAK EUD Status
 * <status battery='100' />
 *
 * @generated from message meshtastic.Status
 */
export type Status = Message<"meshtastic.Status"> & {
  /**
   *
   * Battery level
   *
   * @generated from field: uint32 battery = 1;
   */
  battery: number;
};

/**
 * Describes the message meshtastic.Status.
 * Use `create(StatusSchema)` to create a new message.
 */
export const StatusSchema: GenMessage<Status> = /*@__PURE__*/
  messageDesc(file_meshtastic_atak, 3);

/**
 *
 * ATAK Contact
 * <contact endpoint='0.0.0.0:4242:tcp' phone='+12345678' callsign='FALKE'/>
 *
 * @generated from message meshtastic.Contact
 */
export type Contact = Message<"meshtastic.Contact"> & {
  /**
   *
   * Callsign
   *
   * @generated from field: string callsign = 1;
   */
  callsign: string;

  /**
   *
   * Device callsign
   *
   *
   * IP address of endpoint in integer form (0.0.0.0 default)
   *
   * @generated from field: string device_callsign = 2;
   */
  deviceCallsign: string;
};

/**
 * Describes the message meshtastic.Contact.
 * Use `create(ContactSchema)` to create a new message.
 */
export const ContactSchema: GenMessage<Contact> = /*@__PURE__*/
  messageDesc(file_meshtastic_atak, 4);

/**
 *
 * Position Location Information from ATAK
 *
 * @generated from message meshtastic.PLI
 */
export type PLI = Message<"meshtastic.PLI"> & {
  /**
   *
   * The new preferred location encoding, multiply by 1e-7 to get degrees
   * in floating point
   *
   * @generated from field: sfixed32 latitude_i = 1;
   */
  latitudeI: number;

  /**
   *
   * The new preferred location encoding, multiply by 1e-7 to get degrees
   * in floating point
   *
   * @generated from field: sfixed32 longitude_i = 2;
   */
  longitudeI: number;

  /**
   *
   * Altitude (ATAK prefers HAE)
   *
   * @generated from field: int32 altitude = 3;
   */
  altitude: number;

  /**
   *
   * Speed
   *
   * @generated from field: uint32 speed = 4;
   */
  speed: number;

  /**
   *
   * Course in degrees
   *
   * @generated from field: uint32 course = 5;
   */
  course: number;
};

/**
 * Describes the message meshtastic.PLI.
 * Use `create(PLISchema)` to create a new message.
 */
export const PLISchema: GenMessage<PLI> = /*@__PURE__*/
  messageDesc(file_meshtastic_atak, 5);

/**
 * @generated from enum meshtastic.Team
 */
export enum Team {
  /**
   *
   * Unspecifed
   *
   * @generated from enum value: Unspecifed_Color = 0;
   */
  Unspecifed_Color = 0,

  /**
   *
   * White
   *
   * @generated from enum value: White = 1;
   */
  White = 1,

  /**
   *
   * Yellow
   *
   * @generated from enum value: Yellow = 2;
   */
  Yellow = 2,

  /**
   *
   * Orange
   *
   * @generated from enum value: Orange = 3;
   */
  Orange = 3,

  /**
   *
   * Magenta
   *
   * @generated from enum value: Magenta = 4;
   */
  Magenta = 4,

  /**
   *
   * Red
   *
   * @generated from enum value: Red = 5;
   */
  Red = 5,

  /**
   *
   * Maroon
   *
   * @generated from enum value: Maroon = 6;
   */
  Maroon = 6,

  /**
   *
   * Purple
   *
   * @generated from enum value: Purple = 7;
   */
  Purple = 7,

  /**
   *
   * Dark Blue
   *
   * @generated from enum value: Dark_Blue = 8;
   */
  Dark_Blue = 8,

  /**
   *
   * Blue
   *
   * @generated from enum value: Blue = 9;
   */
  Blue = 9,

  /**
   *
   * Cyan
   *
   * @generated from enum value: Cyan = 10;
   */
  Cyan = 10,

  /**
   *
   * Teal
   *
   * @generated from enum value: Teal = 11;
   */
  Teal = 11,

  /**
   *
   * Green
   *
   * @generated from enum value: Green = 12;
   */
  Green = 12,

  /**
   *
   * Dark Green
   *
   * @generated from enum value: Dark_Green = 13;
   */
  Dark_Green = 13,

  /**
   *
   * Brown
   *
   * @generated from enum value: Brown = 14;
   */
  Brown = 14,
}

/**
 * Describes the enum meshtastic.Team.
 */
export const TeamSchema: GenEnum<Team> = /*@__PURE__*/
  enumDesc(file_meshtastic_atak, 0);

/**
 *
 * Role of the group member
 *
 * @generated from enum meshtastic.MemberRole
 */
export enum MemberRole {
  /**
   *
   * Unspecifed
   *
   * @generated from enum value: Unspecifed = 0;
   */
  Unspecifed = 0,

  /**
   *
   * Team Member
   *
   * @generated from enum value: TeamMember = 1;
   */
  TeamMember = 1,

  /**
   *
   * Team Lead
   *
   * @generated from enum value: TeamLead = 2;
   */
  TeamLead = 2,

  /**
   *
   * Headquarters
   *
   * @generated from enum value: HQ = 3;
   */
  HQ = 3,

  /**
   *
   * Airsoft enthusiast
   *
   * @generated from enum value: Sniper = 4;
   */
  Sniper = 4,

  /**
   *
   * Medic
   *
   * @generated from enum value: Medic = 5;
   */
  Medic = 5,

  /**
   *
   * ForwardObserver
   *
   * @generated from enum value: ForwardObserver = 6;
   */
  ForwardObserver = 6,

  /**
   *
   * Radio Telephone Operator
   *
   * @generated from enum value: RTO = 7;
   */
  RTO = 7,

  /**
   *
   * Doggo
   *
   * @generated from enum value: K9 = 8;
   */
  K9 = 8,
}

/**
 * Describes the enum meshtastic.MemberRole.
 */
export const MemberRoleSchema: GenEnum<MemberRole> = /*@__PURE__*/
  enumDesc(file_meshtastic_atak, 1);

