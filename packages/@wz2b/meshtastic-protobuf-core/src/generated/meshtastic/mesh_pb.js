// @generated by protoc-gen-es v2.2.5 with parameter "target=js+dts,import_extension=js"
// @generated from file meshtastic/mesh.proto (package meshtastic, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, tsEnum } from "@bufbuild/protobuf/codegenv1";
import { file_meshtastic_channel } from "./channel_pb.js";
import { file_meshtastic_config } from "./config_pb.js";
import { file_meshtastic_module_config } from "./module_config_pb.js";
import { file_meshtastic_portnums } from "./portnums_pb.js";
import { file_meshtastic_telemetry } from "./telemetry_pb.js";
import { file_meshtastic_xmodem } from "./xmodem_pb.js";
import { file_meshtastic_device_ui } from "./device_ui_pb.js";

/**
 * Describes the file meshtastic/mesh.proto.
 */
export const file_meshtastic_mesh = /*@__PURE__*/
  fileDesc("", [file_meshtastic_channel, file_meshtastic_config, file_meshtastic_module_config, file_meshtastic_portnums, file_meshtastic_telemetry, file_meshtastic_xmodem, file_meshtastic_device_ui]);

/**
 * Describes the message meshtastic.Position.
 * Use `create(PositionSchema)` to create a new message.
 */
export const PositionSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 0);

/**
 * Describes the enum meshtastic.Position.LocSource.
 */
export const Position_LocSourceSchema = /*@__PURE__*/
  enumDesc(file_meshtastic_mesh, 0, 0);

/**
 *
 * How the location was acquired: manual, onboard GPS, external (EUD) GPS
 *
 * @generated from enum meshtastic.Position.LocSource
 */
export const Position_LocSource = /*@__PURE__*/
  tsEnum(Position_LocSourceSchema);

/**
 * Describes the enum meshtastic.Position.AltSource.
 */
export const Position_AltSourceSchema = /*@__PURE__*/
  enumDesc(file_meshtastic_mesh, 0, 1);

/**
 *
 * How the altitude was acquired: manual, GPS int/ext, etc
 * Default: same as location_source if present
 *
 * @generated from enum meshtastic.Position.AltSource
 */
export const Position_AltSource = /*@__PURE__*/
  tsEnum(Position_AltSourceSchema);

/**
 * Describes the message meshtastic.User.
 * Use `create(UserSchema)` to create a new message.
 */
export const UserSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 1);

/**
 * Describes the message meshtastic.RouteDiscovery.
 * Use `create(RouteDiscoverySchema)` to create a new message.
 */
export const RouteDiscoverySchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 2);

/**
 * Describes the message meshtastic.Routing.
 * Use `create(RoutingSchema)` to create a new message.
 */
export const RoutingSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 3);

/**
 * Describes the enum meshtastic.Routing.Error.
 */
export const Routing_ErrorSchema = /*@__PURE__*/
  enumDesc(file_meshtastic_mesh, 3, 0);

/**
 *
 * A failure in delivering a message (usually used for routing control messages, but might be provided in addition to ack.fail_id to provide
 * details on the type of failure).
 *
 * @generated from enum meshtastic.Routing.Error
 */
export const Routing_Error = /*@__PURE__*/
  tsEnum(Routing_ErrorSchema);

/**
 * Describes the message meshtastic.Data.
 * Use `create(DataSchema)` to create a new message.
 */
export const DataSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 4);

/**
 * Describes the message meshtastic.Waypoint.
 * Use `create(WaypointSchema)` to create a new message.
 */
export const WaypointSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 5);

/**
 * Describes the message meshtastic.MqttClientProxyMessage.
 * Use `create(MqttClientProxyMessageSchema)` to create a new message.
 */
export const MqttClientProxyMessageSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 6);

/**
 * Describes the message meshtastic.MeshPacket.
 * Use `create(MeshPacketSchema)` to create a new message.
 */
export const MeshPacketSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 7);

/**
 * Describes the enum meshtastic.MeshPacket.Priority.
 */
export const MeshPacket_PrioritySchema = /*@__PURE__*/
  enumDesc(file_meshtastic_mesh, 7, 0);

/**
 *
 * The priority of this message for sending.
 * Higher priorities are sent first (when managing the transmit queue).
 * This field is never sent over the air, it is only used internally inside of a local device node.
 * API clients (either on the local node or connected directly to the node)
 * can set this parameter if necessary.
 * (values must be <= 127 to keep protobuf field to one byte in size.
 * Detailed background on this field:
 * I noticed a funny side effect of lora being so slow: Usually when making
 * a protocol there isn’t much need to use message priority to change the order
 * of transmission (because interfaces are fairly fast).
 * But for lora where packets can take a few seconds each, it is very important
 * to make sure that critical packets are sent ASAP.
 * In the case of meshtastic that means we want to send protocol acks as soon as possible
 * (to prevent unneeded retransmissions), we want routing messages to be sent next,
 * then messages marked as reliable and finally 'background' packets like periodic position updates.
 * So I bit the bullet and implemented a new (internal - not sent over the air)
 * field in MeshPacket called 'priority'.
 * And the transmission queue in the router object is now a priority queue.
 *
 * @generated from enum meshtastic.MeshPacket.Priority
 */
export const MeshPacket_Priority = /*@__PURE__*/
  tsEnum(MeshPacket_PrioritySchema);

/**
 * Describes the enum meshtastic.MeshPacket.Delayed.
 */
export const MeshPacket_DelayedSchema = /*@__PURE__*/
  enumDesc(file_meshtastic_mesh, 7, 1);

/**
 *
 * Identify if this is a delayed packet
 *
 * @generated from enum meshtastic.MeshPacket.Delayed
 */
export const MeshPacket_Delayed = /*@__PURE__*/
  tsEnum(MeshPacket_DelayedSchema);

/**
 * Describes the message meshtastic.NodeInfo.
 * Use `create(NodeInfoSchema)` to create a new message.
 */
export const NodeInfoSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 8);

/**
 * Describes the message meshtastic.MyNodeInfo.
 * Use `create(MyNodeInfoSchema)` to create a new message.
 */
export const MyNodeInfoSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 9);

/**
 * Describes the message meshtastic.LogRecord.
 * Use `create(LogRecordSchema)` to create a new message.
 */
export const LogRecordSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 10);

/**
 * Describes the enum meshtastic.LogRecord.Level.
 */
export const LogRecord_LevelSchema = /*@__PURE__*/
  enumDesc(file_meshtastic_mesh, 10, 0);

/**
 *
 * Log levels, chosen to match python logging conventions.
 *
 * @generated from enum meshtastic.LogRecord.Level
 */
export const LogRecord_Level = /*@__PURE__*/
  tsEnum(LogRecord_LevelSchema);

/**
 * Describes the message meshtastic.QueueStatus.
 * Use `create(QueueStatusSchema)` to create a new message.
 */
export const QueueStatusSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 11);

/**
 * Describes the message meshtastic.FromRadio.
 * Use `create(FromRadioSchema)` to create a new message.
 */
export const FromRadioSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 12);

/**
 * Describes the message meshtastic.ClientNotification.
 * Use `create(ClientNotificationSchema)` to create a new message.
 */
export const ClientNotificationSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 13);

/**
 * Describes the message meshtastic.FileInfo.
 * Use `create(FileInfoSchema)` to create a new message.
 */
export const FileInfoSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 14);

/**
 * Describes the message meshtastic.ToRadio.
 * Use `create(ToRadioSchema)` to create a new message.
 */
export const ToRadioSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 15);

/**
 * Describes the message meshtastic.Compressed.
 * Use `create(CompressedSchema)` to create a new message.
 */
export const CompressedSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 16);

/**
 * Describes the message meshtastic.NeighborInfo.
 * Use `create(NeighborInfoSchema)` to create a new message.
 */
export const NeighborInfoSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 17);

/**
 * Describes the message meshtastic.Neighbor.
 * Use `create(NeighborSchema)` to create a new message.
 */
export const NeighborSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 18);

/**
 * Describes the message meshtastic.DeviceMetadata.
 * Use `create(DeviceMetadataSchema)` to create a new message.
 */
export const DeviceMetadataSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 19);

/**
 * Describes the message meshtastic.Heartbeat.
 * Use `create(HeartbeatSchema)` to create a new message.
 */
export const HeartbeatSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 20);

/**
 * Describes the message meshtastic.NodeRemoteHardwarePin.
 * Use `create(NodeRemoteHardwarePinSchema)` to create a new message.
 */
export const NodeRemoteHardwarePinSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 21);

/**
 * Describes the message meshtastic.ChunkedPayload.
 * Use `create(ChunkedPayloadSchema)` to create a new message.
 */
export const ChunkedPayloadSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 22);

/**
 * Describes the message meshtastic.resend_chunks.
 * Use `create(resend_chunksSchema)` to create a new message.
 */
export const resend_chunksSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 23);

/**
 * Describes the message meshtastic.ChunkedPayloadResponse.
 * Use `create(ChunkedPayloadResponseSchema)` to create a new message.
 */
export const ChunkedPayloadResponseSchema = /*@__PURE__*/
  messageDesc(file_meshtastic_mesh, 24);

/**
 * Describes the enum meshtastic.HardwareModel.
 */
export const HardwareModelSchema = /*@__PURE__*/
  enumDesc(file_meshtastic_mesh, 0);

/**
 *
 * Note: these enum names must EXACTLY match the string used in the device
 * bin/build-all.sh script.
 * Because they will be used to find firmware filenames in the android app for OTA updates.
 * To match the old style filenames, _ is converted to -, p is converted to .
 *
 * @generated from enum meshtastic.HardwareModel
 */
export const HardwareModel = /*@__PURE__*/
  tsEnum(HardwareModelSchema);

/**
 * Describes the enum meshtastic.Constants.
 */
export const ConstantsSchema = /*@__PURE__*/
  enumDesc(file_meshtastic_mesh, 1);

/**
 *
 * Shared constants between device and phone
 *
 * @generated from enum meshtastic.Constants
 */
export const Constants = /*@__PURE__*/
  tsEnum(ConstantsSchema);

/**
 * Describes the enum meshtastic.CriticalErrorCode.
 */
export const CriticalErrorCodeSchema = /*@__PURE__*/
  enumDesc(file_meshtastic_mesh, 2);

/**
 *
 * Error codes for critical errors
 * The device might report these fault codes on the screen.
 * If you encounter a fault code, please post on the meshtastic.discourse.group
 * and we'll try to help.
 *
 * @generated from enum meshtastic.CriticalErrorCode
 */
export const CriticalErrorCode = /*@__PURE__*/
  tsEnum(CriticalErrorCodeSchema);

/**
 * Describes the enum meshtastic.ExcludedModules.
 */
export const ExcludedModulesSchema = /*@__PURE__*/
  enumDesc(file_meshtastic_mesh, 3);

/**
 *
 * Enum for modules excluded from a device's configuration.
 * Each value represents a ModuleConfigType that can be toggled as excluded
 * by setting its corresponding bit in the `excluded_modules` bitmask field.
 *
 * @generated from enum meshtastic.ExcludedModules
 */
export const ExcludedModules = /*@__PURE__*/
  tsEnum(ExcludedModulesSchema);

