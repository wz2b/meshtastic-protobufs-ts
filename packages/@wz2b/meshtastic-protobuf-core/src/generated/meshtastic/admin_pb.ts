// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=js"
// @generated from file meshtastic/admin.proto (package meshtastic, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Channel } from "./channel_pb.js";
import { file_meshtastic_channel } from "./channel_pb.js";
import type { Config } from "./config_pb.js";
import { file_meshtastic_config } from "./config_pb.js";
import type { DeviceConnectionStatus } from "./connection_status_pb.js";
import { file_meshtastic_connection_status } from "./connection_status_pb.js";
import type { DeviceMetadata, NodeRemoteHardwarePin, Position, User } from "./mesh_pb.js";
import { file_meshtastic_mesh } from "./mesh_pb.js";
import type { ModuleConfig } from "./module_config_pb.js";
import { file_meshtastic_module_config } from "./module_config_pb.js";
import type { DeviceUIConfig } from "./device_ui_pb.js";
import { file_meshtastic_device_ui } from "./device_ui_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file meshtastic/admin.proto.
 */
export const file_meshtastic_admin: GenFile = /*@__PURE__*/
  fileDesc("ChZtZXNodGFzdGljL2FkbWluLnByb3RvEgptZXNodGFzdGljItAWCgxBZG1pbk1lc3NhZ2USFwoPc2Vzc2lvbl9wYXNza2V5GGUgASgMEh0KE2dldF9jaGFubmVsX3JlcXVlc3QYASABKA1IABIzChRnZXRfY2hhbm5lbF9yZXNwb25zZRgCIAEoCzITLm1lc2h0YXN0aWMuQ2hhbm5lbEgAEhsKEWdldF9vd25lcl9yZXF1ZXN0GAMgASgISAASLgoSZ2V0X293bmVyX3Jlc3BvbnNlGAQgASgLMhAubWVzaHRhc3RpYy5Vc2VySAASQQoSZ2V0X2NvbmZpZ19yZXF1ZXN0GAUgASgOMiMubWVzaHRhc3RpYy5BZG1pbk1lc3NhZ2UuQ29uZmlnVHlwZUgAEjEKE2dldF9jb25maWdfcmVzcG9uc2UYBiABKAsyEi5tZXNodGFzdGljLkNvbmZpZ0gAEk4KGWdldF9tb2R1bGVfY29uZmlnX3JlcXVlc3QYByABKA4yKS5tZXNodGFzdGljLkFkbWluTWVzc2FnZS5Nb2R1bGVDb25maWdUeXBlSAASPgoaZ2V0X21vZHVsZV9jb25maWdfcmVzcG9uc2UYCCABKAsyGC5tZXNodGFzdGljLk1vZHVsZUNvbmZpZ0gAEjQKKmdldF9jYW5uZWRfbWVzc2FnZV9tb2R1bGVfbWVzc2FnZXNfcmVxdWVzdBgKIAEoCEgAEjUKK2dldF9jYW5uZWRfbWVzc2FnZV9tb2R1bGVfbWVzc2FnZXNfcmVzcG9uc2UYCyABKAlIABIlChtnZXRfZGV2aWNlX21ldGFkYXRhX3JlcXVlc3QYDCABKAhIABJCChxnZXRfZGV2aWNlX21ldGFkYXRhX3Jlc3BvbnNlGA0gASgLMhoubWVzaHRhc3RpYy5EZXZpY2VNZXRhZGF0YUgAEh4KFGdldF9yaW5ndG9uZV9yZXF1ZXN0GA4gASgISAASHwoVZ2V0X3Jpbmd0b25lX3Jlc3BvbnNlGA8gASgJSAASLgokZ2V0X2RldmljZV9jb25uZWN0aW9uX3N0YXR1c19yZXF1ZXN0GBAgASgISAASUwolZ2V0X2RldmljZV9jb25uZWN0aW9uX3N0YXR1c19yZXNwb25zZRgRIAEoCzIiLm1lc2h0YXN0aWMuRGV2aWNlQ29ubmVjdGlvblN0YXR1c0gAEjEKDHNldF9oYW1fbW9kZRgSIAEoCzIZLm1lc2h0YXN0aWMuSGFtUGFyYW1ldGVyc0gAEi8KJWdldF9ub2RlX3JlbW90ZV9oYXJkd2FyZV9waW5zX3JlcXVlc3QYEyABKAhIABJcCiZnZXRfbm9kZV9yZW1vdGVfaGFyZHdhcmVfcGluc19yZXNwb25zZRgUIAEoCzIqLm1lc2h0YXN0aWMuTm9kZVJlbW90ZUhhcmR3YXJlUGluc1Jlc3BvbnNlSAASIAoWZW50ZXJfZGZ1X21vZGVfcmVxdWVzdBgVIAEoCEgAEh0KE2RlbGV0ZV9maWxlX3JlcXVlc3QYFiABKAlIABITCglzZXRfc2NhbGUYFyABKA1IABJFChJiYWNrdXBfcHJlZmVyZW5jZXMYGCABKA4yJy5tZXNodGFzdGljLkFkbWluTWVzc2FnZS5CYWNrdXBMb2NhdGlvbkgAEkYKE3Jlc3RvcmVfcHJlZmVyZW5jZXMYGSABKA4yJy5tZXNodGFzdGljLkFkbWluTWVzc2FnZS5CYWNrdXBMb2NhdGlvbkgAEkwKGXJlbW92ZV9iYWNrdXBfcHJlZmVyZW5jZXMYGiABKA4yJy5tZXNodGFzdGljLkFkbWluTWVzc2FnZS5CYWNrdXBMb2NhdGlvbkgAEiUKCXNldF9vd25lchggIAEoCzIQLm1lc2h0YXN0aWMuVXNlckgAEioKC3NldF9jaGFubmVsGCEgASgLMhMubWVzaHRhc3RpYy5DaGFubmVsSAASKAoKc2V0X2NvbmZpZxgiIAEoCzISLm1lc2h0YXN0aWMuQ29uZmlnSAASNQoRc2V0X21vZHVsZV9jb25maWcYIyABKAsyGC5tZXNodGFzdGljLk1vZHVsZUNvbmZpZ0gAEiwKInNldF9jYW5uZWRfbWVzc2FnZV9tb2R1bGVfbWVzc2FnZXMYJCABKAlIABIeChRzZXRfcmluZ3RvbmVfbWVzc2FnZRglIAEoCUgAEhsKEXJlbW92ZV9ieV9ub2RlbnVtGCYgASgNSAASGwoRc2V0X2Zhdm9yaXRlX25vZGUYJyABKA1IABIeChRyZW1vdmVfZmF2b3JpdGVfbm9kZRgoIAEoDUgAEjIKEnNldF9maXhlZF9wb3NpdGlvbhgpIAEoCzIULm1lc2h0YXN0aWMuUG9zaXRpb25IABIfChVyZW1vdmVfZml4ZWRfcG9zaXRpb24YKiABKAhIABIXCg1zZXRfdGltZV9vbmx5GCsgASgHSAASHwoVZ2V0X3VpX2NvbmZpZ19yZXF1ZXN0GCwgASgISAASPAoWZ2V0X3VpX2NvbmZpZ19yZXNwb25zZRgtIAEoCzIaLm1lc2h0YXN0aWMuRGV2aWNlVUlDb25maWdIABI1Cg9zdG9yZV91aV9jb25maWcYLiABKAsyGi5tZXNodGFzdGljLkRldmljZVVJQ29uZmlnSAASGgoQc2V0X2lnbm9yZWRfbm9kZRgvIAEoDUgAEh0KE3JlbW92ZV9pZ25vcmVkX25vZGUYMCABKA1IABIdChNiZWdpbl9lZGl0X3NldHRpbmdzGEAgASgISAASHgoUY29tbWl0X2VkaXRfc2V0dGluZ3MYQSABKAhIABIeChRmYWN0b3J5X3Jlc2V0X2RldmljZRheIAEoBUgAEhwKEnJlYm9vdF9vdGFfc2Vjb25kcxhfIAEoBUgAEhgKDmV4aXRfc2ltdWxhdG9yGGAgASgISAASGAoOcmVib290X3NlY29uZHMYYSABKAVIABIaChBzaHV0ZG93bl9zZWNvbmRzGGIgASgFSAASHgoUZmFjdG9yeV9yZXNldF9jb25maWcYYyABKAVIABIWCgxub2RlZGJfcmVzZXQYZCABKAVIACLWAQoKQ29uZmlnVHlwZRIRCg1ERVZJQ0VfQ09ORklHEAASEwoPUE9TSVRJT05fQ09ORklHEAESEAoMUE9XRVJfQ09ORklHEAISEgoOTkVUV09SS19DT05GSUcQAxISCg5ESVNQTEFZX0NPTkZJRxAEEg8KC0xPUkFfQ09ORklHEAUSFAoQQkxVRVRPT1RIX0NPTkZJRxAGEhMKD1NFQ1VSSVRZX0NPTkZJRxAHEhUKEVNFU1NJT05LRVlfQ09ORklHEAgSEwoPREVWSUNFVUlfQ09ORklHEAkiuwIKEE1vZHVsZUNvbmZpZ1R5cGUSDwoLTVFUVF9DT05GSUcQABIRCg1TRVJJQUxfQ09ORklHEAESEwoPRVhUTk9USUZfQ09ORklHEAISFwoTU1RPUkVGT1JXQVJEX0NPTkZJRxADEhQKEFJBTkdFVEVTVF9DT05GSUcQBBIUChBURUxFTUVUUllfQ09ORklHEAUSFAoQQ0FOTkVETVNHX0NPTkZJRxAGEhAKDEFVRElPX0NPTkZJRxAHEhkKFVJFTU9URUhBUkRXQVJFX0NPTkZJRxAIEhcKE05FSUdIQk9SSU5GT19DT05GSUcQCRIaChZBTUJJRU5UTElHSFRJTkdfQ09ORklHEAoSGgoWREVURUNUSU9OU0VOU09SX0NPTkZJRxALEhUKEVBBWENPVU5URVJfQ09ORklHEAwiIwoOQmFja3VwTG9jYXRpb24SCQoFRkxBU0gQABIGCgJTRBABQhEKD3BheWxvYWRfdmFyaWFudCJbCg1IYW1QYXJhbWV0ZXJzEhEKCWNhbGxfc2lnbhgBIAEoCRIQCgh0eF9wb3dlchgCIAEoBRIRCglmcmVxdWVuY3kYAyABKAISEgoKc2hvcnRfbmFtZRgEIAEoCSJmCh5Ob2RlUmVtb3RlSGFyZHdhcmVQaW5zUmVzcG9uc2USRAoZbm9kZV9yZW1vdGVfaGFyZHdhcmVfcGlucxgBIAMoCzIhLm1lc2h0YXN0aWMuTm9kZVJlbW90ZUhhcmR3YXJlUGluQmAKE2NvbS5nZWVrc3ZpbGxlLm1lc2hCC0FkbWluUHJvdG9zWiJnaXRodWIuY29tL21lc2h0YXN0aWMvZ28vZ2VuZXJhdGVkqgIUTWVzaHRhc3RpYy5Qcm90b2J1ZnO6AgBiBnByb3RvMw", [file_meshtastic_channel, file_meshtastic_config, file_meshtastic_connection_status, file_meshtastic_mesh, file_meshtastic_module_config, file_meshtastic_device_ui]);

/**
 *
 * This message is handled by the Admin module and is responsible for all settings/channel read/write operations.
 * This message is used to do settings operations to both remote AND local nodes.
 * (Prior to 1.2 these operations were done via special ToRadio operations)
 *
 * @generated from message meshtastic.AdminMessage
 */
export type AdminMessage = Message<"meshtastic.AdminMessage"> & {
  /**
   *
   * The node generates this key and sends it with any get_x_response packets.
   * The client MUST include the same key with any set_x commands. Key expires after 300 seconds.
   * Prevents replay attacks for admin messages.
   *
   * @generated from field: bytes session_passkey = 101;
   */
  sessionPasskey: Uint8Array;

  /**
   *
   * TODO: REPLACE
   *
   * @generated from oneof meshtastic.AdminMessage.payload_variant
   */
  payloadVariant: {
    /**
     *
     * Send the specified channel in the response to this message
     * NOTE: This field is sent with the channel index + 1 (to ensure we never try to send 'zero' - which protobufs treats as not present)
     *
     * @generated from field: uint32 get_channel_request = 1;
     */
    value: number;
    case: "getChannelRequest";
  } | {
    /**
     *
     * TODO: REPLACE
     *
     * @generated from field: meshtastic.Channel get_channel_response = 2;
     */
    value: Channel;
    case: "getChannelResponse";
  } | {
    /**
     *
     * Send the current owner data in the response to this message.
     *
     * @generated from field: bool get_owner_request = 3;
     */
    value: boolean;
    case: "getOwnerRequest";
  } | {
    /**
     *
     * TODO: REPLACE
     *
     * @generated from field: meshtastic.User get_owner_response = 4;
     */
    value: User;
    case: "getOwnerResponse";
  } | {
    /**
     *
     * Ask for the following config data to be sent
     *
     * @generated from field: meshtastic.AdminMessage.ConfigType get_config_request = 5;
     */
    value: AdminMessage_ConfigType;
    case: "getConfigRequest";
  } | {
    /**
     *
     * Send the current Config in the response to this message.
     *
     * @generated from field: meshtastic.Config get_config_response = 6;
     */
    value: Config;
    case: "getConfigResponse";
  } | {
    /**
     *
     * Ask for the following config data to be sent
     *
     * @generated from field: meshtastic.AdminMessage.ModuleConfigType get_module_config_request = 7;
     */
    value: AdminMessage_ModuleConfigType;
    case: "getModuleConfigRequest";
  } | {
    /**
     *
     * Send the current Config in the response to this message.
     *
     * @generated from field: meshtastic.ModuleConfig get_module_config_response = 8;
     */
    value: ModuleConfig;
    case: "getModuleConfigResponse";
  } | {
    /**
     *
     * Get the Canned Message Module messages in the response to this message.
     *
     * @generated from field: bool get_canned_message_module_messages_request = 10;
     */
    value: boolean;
    case: "getCannedMessageModuleMessagesRequest";
  } | {
    /**
     *
     * Get the Canned Message Module messages in the response to this message.
     *
     * @generated from field: string get_canned_message_module_messages_response = 11;
     */
    value: string;
    case: "getCannedMessageModuleMessagesResponse";
  } | {
    /**
     *
     * Request the node to send device metadata (firmware, protobuf version, etc)
     *
     * @generated from field: bool get_device_metadata_request = 12;
     */
    value: boolean;
    case: "getDeviceMetadataRequest";
  } | {
    /**
     *
     * Device metadata response
     *
     * @generated from field: meshtastic.DeviceMetadata get_device_metadata_response = 13;
     */
    value: DeviceMetadata;
    case: "getDeviceMetadataResponse";
  } | {
    /**
     *
     * Get the Ringtone in the response to this message.
     *
     * @generated from field: bool get_ringtone_request = 14;
     */
    value: boolean;
    case: "getRingtoneRequest";
  } | {
    /**
     *
     * Get the Ringtone in the response to this message.
     *
     * @generated from field: string get_ringtone_response = 15;
     */
    value: string;
    case: "getRingtoneResponse";
  } | {
    /**
     *
     * Request the node to send it's connection status
     *
     * @generated from field: bool get_device_connection_status_request = 16;
     */
    value: boolean;
    case: "getDeviceConnectionStatusRequest";
  } | {
    /**
     *
     * Device connection status response
     *
     * @generated from field: meshtastic.DeviceConnectionStatus get_device_connection_status_response = 17;
     */
    value: DeviceConnectionStatus;
    case: "getDeviceConnectionStatusResponse";
  } | {
    /**
     *
     * Setup a node for licensed amateur (ham) radio operation
     *
     * @generated from field: meshtastic.HamParameters set_ham_mode = 18;
     */
    value: HamParameters;
    case: "setHamMode";
  } | {
    /**
     *
     * Get the mesh's nodes with their available gpio pins for RemoteHardware module use
     *
     * @generated from field: bool get_node_remote_hardware_pins_request = 19;
     */
    value: boolean;
    case: "getNodeRemoteHardwarePinsRequest";
  } | {
    /**
     *
     * Respond with the mesh's nodes with their available gpio pins for RemoteHardware module use
     *
     * @generated from field: meshtastic.NodeRemoteHardwarePinsResponse get_node_remote_hardware_pins_response = 20;
     */
    value: NodeRemoteHardwarePinsResponse;
    case: "getNodeRemoteHardwarePinsResponse";
  } | {
    /**
     *
     * Enter (UF2) DFU mode
     * Only implemented on NRF52 currently
     *
     * @generated from field: bool enter_dfu_mode_request = 21;
     */
    value: boolean;
    case: "enterDfuModeRequest";
  } | {
    /**
     *
     * Delete the file by the specified path from the device
     *
     * @generated from field: string delete_file_request = 22;
     */
    value: string;
    case: "deleteFileRequest";
  } | {
    /**
     *
     * Set zero and offset for scale chips
     *
     * @generated from field: uint32 set_scale = 23;
     */
    value: number;
    case: "setScale";
  } | {
    /**
     *
     * Backup the node's preferences
     *
     * @generated from field: meshtastic.AdminMessage.BackupLocation backup_preferences = 24;
     */
    value: AdminMessage_BackupLocation;
    case: "backupPreferences";
  } | {
    /**
     *
     * Restore the node's preferences
     *
     * @generated from field: meshtastic.AdminMessage.BackupLocation restore_preferences = 25;
     */
    value: AdminMessage_BackupLocation;
    case: "restorePreferences";
  } | {
    /**
     *
     * Remove backups of the node's preferences
     *
     * @generated from field: meshtastic.AdminMessage.BackupLocation remove_backup_preferences = 26;
     */
    value: AdminMessage_BackupLocation;
    case: "removeBackupPreferences";
  } | {
    /**
     *
     * Set the owner for this node
     *
     * @generated from field: meshtastic.User set_owner = 32;
     */
    value: User;
    case: "setOwner";
  } | {
    /**
     *
     * Set channels (using the new API).
     * A special channel is the "primary channel".
     * The other records are secondary channels.
     * Note: only one channel can be marked as primary.
     * If the client sets a particular channel to be primary, the previous channel will be set to SECONDARY automatically.
     *
     * @generated from field: meshtastic.Channel set_channel = 33;
     */
    value: Channel;
    case: "setChannel";
  } | {
    /**
     *
     * Set the current Config
     *
     * @generated from field: meshtastic.Config set_config = 34;
     */
    value: Config;
    case: "setConfig";
  } | {
    /**
     *
     * Set the current Config
     *
     * @generated from field: meshtastic.ModuleConfig set_module_config = 35;
     */
    value: ModuleConfig;
    case: "setModuleConfig";
  } | {
    /**
     *
     * Set the Canned Message Module messages text.
     *
     * @generated from field: string set_canned_message_module_messages = 36;
     */
    value: string;
    case: "setCannedMessageModuleMessages";
  } | {
    /**
     *
     * Set the ringtone for ExternalNotification.
     *
     * @generated from field: string set_ringtone_message = 37;
     */
    value: string;
    case: "setRingtoneMessage";
  } | {
    /**
     *
     * Remove the node by the specified node-num from the NodeDB on the device
     *
     * @generated from field: uint32 remove_by_nodenum = 38;
     */
    value: number;
    case: "removeByNodenum";
  } | {
    /**
     *
     * Set specified node-num to be favorited on the NodeDB on the device
     *
     * @generated from field: uint32 set_favorite_node = 39;
     */
    value: number;
    case: "setFavoriteNode";
  } | {
    /**
     *
     * Set specified node-num to be un-favorited on the NodeDB on the device
     *
     * @generated from field: uint32 remove_favorite_node = 40;
     */
    value: number;
    case: "removeFavoriteNode";
  } | {
    /**
     *
     * Set fixed position data on the node and then set the position.fixed_position = true
     *
     * @generated from field: meshtastic.Position set_fixed_position = 41;
     */
    value: Position;
    case: "setFixedPosition";
  } | {
    /**
     *
     * Clear fixed position coordinates and then set position.fixed_position = false
     *
     * @generated from field: bool remove_fixed_position = 42;
     */
    value: boolean;
    case: "removeFixedPosition";
  } | {
    /**
     *
     * Set time only on the node
     * Convenience method to set the time on the node (as Net quality) without any other position data
     *
     * @generated from field: fixed32 set_time_only = 43;
     */
    value: number;
    case: "setTimeOnly";
  } | {
    /**
     *
     * Tell the node to send the stored ui data.
     *
     * @generated from field: bool get_ui_config_request = 44;
     */
    value: boolean;
    case: "getUiConfigRequest";
  } | {
    /**
     *
     * Reply stored device ui data.
     *
     * @generated from field: meshtastic.DeviceUIConfig get_ui_config_response = 45;
     */
    value: DeviceUIConfig;
    case: "getUiConfigResponse";
  } | {
    /**
     *
     * Tell the node to store UI data persistently.
     *
     * @generated from field: meshtastic.DeviceUIConfig store_ui_config = 46;
     */
    value: DeviceUIConfig;
    case: "storeUiConfig";
  } | {
    /**
     *
     * Set specified node-num to be ignored on the NodeDB on the device
     *
     * @generated from field: uint32 set_ignored_node = 47;
     */
    value: number;
    case: "setIgnoredNode";
  } | {
    /**
     *
     * Set specified node-num to be un-ignored on the NodeDB on the device
     *
     * @generated from field: uint32 remove_ignored_node = 48;
     */
    value: number;
    case: "removeIgnoredNode";
  } | {
    /**
     *
     * Begins an edit transaction for config, module config, owner, and channel settings changes
     * This will delay the standard *implicit* save to the file system and subsequent reboot behavior until committed (commit_edit_settings)
     *
     * @generated from field: bool begin_edit_settings = 64;
     */
    value: boolean;
    case: "beginEditSettings";
  } | {
    /**
     *
     * Commits an open transaction for any edits made to config, module config, owner, and channel settings
     *
     * @generated from field: bool commit_edit_settings = 65;
     */
    value: boolean;
    case: "commitEditSettings";
  } | {
    /**
     *
     * Tell the node to factory reset config everything; all device state and configuration will be returned to factory defaults and BLE bonds will be cleared.
     *
     * @generated from field: int32 factory_reset_device = 94;
     */
    value: number;
    case: "factoryResetDevice";
  } | {
    /**
     *
     * Tell the node to reboot into the OTA Firmware in this many seconds (or <0 to cancel reboot)
     * Only Implemented for ESP32 Devices. This needs to be issued to send a new main firmware via bluetooth.
     *
     * @generated from field: int32 reboot_ota_seconds = 95;
     */
    value: number;
    case: "rebootOtaSeconds";
  } | {
    /**
     *
     * This message is only supported for the simulator Portduino build.
     * If received the simulator will exit successfully.
     *
     * @generated from field: bool exit_simulator = 96;
     */
    value: boolean;
    case: "exitSimulator";
  } | {
    /**
     *
     * Tell the node to reboot in this many seconds (or <0 to cancel reboot)
     *
     * @generated from field: int32 reboot_seconds = 97;
     */
    value: number;
    case: "rebootSeconds";
  } | {
    /**
     *
     * Tell the node to shutdown in this many seconds (or <0 to cancel shutdown)
     *
     * @generated from field: int32 shutdown_seconds = 98;
     */
    value: number;
    case: "shutdownSeconds";
  } | {
    /**
     *
     * Tell the node to factory reset config; all device state and configuration will be returned to factory defaults; BLE bonds will be preserved.
     *
     * @generated from field: int32 factory_reset_config = 99;
     */
    value: number;
    case: "factoryResetConfig";
  } | {
    /**
     *
     * Tell the node to reset the nodedb.
     *
     * @generated from field: int32 nodedb_reset = 100;
     */
    value: number;
    case: "nodedbReset";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message meshtastic.AdminMessage.
 * Use `create(AdminMessageSchema)` to create a new message.
 */
export const AdminMessageSchema: GenMessage<AdminMessage> = /*@__PURE__*/
  messageDesc(file_meshtastic_admin, 0);

/**
 *
 * TODO: REPLACE
 *
 * @generated from enum meshtastic.AdminMessage.ConfigType
 */
export enum AdminMessage_ConfigType {
  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: DEVICE_CONFIG = 0;
   */
  DEVICE_CONFIG = 0,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: POSITION_CONFIG = 1;
   */
  POSITION_CONFIG = 1,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: POWER_CONFIG = 2;
   */
  POWER_CONFIG = 2,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: NETWORK_CONFIG = 3;
   */
  NETWORK_CONFIG = 3,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: DISPLAY_CONFIG = 4;
   */
  DISPLAY_CONFIG = 4,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: LORA_CONFIG = 5;
   */
  LORA_CONFIG = 5,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: BLUETOOTH_CONFIG = 6;
   */
  BLUETOOTH_CONFIG = 6,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: SECURITY_CONFIG = 7;
   */
  SECURITY_CONFIG = 7,

  /**
   *
   * Session key config
   *
   * @generated from enum value: SESSIONKEY_CONFIG = 8;
   */
  SESSIONKEY_CONFIG = 8,

  /**
   *
   * device-ui config
   *
   * @generated from enum value: DEVICEUI_CONFIG = 9;
   */
  DEVICEUI_CONFIG = 9,
}

/**
 * Describes the enum meshtastic.AdminMessage.ConfigType.
 */
export const AdminMessage_ConfigTypeSchema: GenEnum<AdminMessage_ConfigType> = /*@__PURE__*/
  enumDesc(file_meshtastic_admin, 0, 0);

/**
 *
 * TODO: REPLACE
 *
 * @generated from enum meshtastic.AdminMessage.ModuleConfigType
 */
export enum AdminMessage_ModuleConfigType {
  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: MQTT_CONFIG = 0;
   */
  MQTT_CONFIG = 0,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: SERIAL_CONFIG = 1;
   */
  SERIAL_CONFIG = 1,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: EXTNOTIF_CONFIG = 2;
   */
  EXTNOTIF_CONFIG = 2,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: STOREFORWARD_CONFIG = 3;
   */
  STOREFORWARD_CONFIG = 3,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: RANGETEST_CONFIG = 4;
   */
  RANGETEST_CONFIG = 4,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: TELEMETRY_CONFIG = 5;
   */
  TELEMETRY_CONFIG = 5,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: CANNEDMSG_CONFIG = 6;
   */
  CANNEDMSG_CONFIG = 6,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: AUDIO_CONFIG = 7;
   */
  AUDIO_CONFIG = 7,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: REMOTEHARDWARE_CONFIG = 8;
   */
  REMOTEHARDWARE_CONFIG = 8,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: NEIGHBORINFO_CONFIG = 9;
   */
  NEIGHBORINFO_CONFIG = 9,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: AMBIENTLIGHTING_CONFIG = 10;
   */
  AMBIENTLIGHTING_CONFIG = 10,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: DETECTIONSENSOR_CONFIG = 11;
   */
  DETECTIONSENSOR_CONFIG = 11,

  /**
   *
   * TODO: REPLACE
   *
   * @generated from enum value: PAXCOUNTER_CONFIG = 12;
   */
  PAXCOUNTER_CONFIG = 12,
}

/**
 * Describes the enum meshtastic.AdminMessage.ModuleConfigType.
 */
export const AdminMessage_ModuleConfigTypeSchema: GenEnum<AdminMessage_ModuleConfigType> = /*@__PURE__*/
  enumDesc(file_meshtastic_admin, 0, 1);

/**
 * @generated from enum meshtastic.AdminMessage.BackupLocation
 */
export enum AdminMessage_BackupLocation {
  /**
   *
   * Backup to the internal flash
   *
   * @generated from enum value: FLASH = 0;
   */
  FLASH = 0,

  /**
   *
   * Backup to the SD card
   *
   * @generated from enum value: SD = 1;
   */
  SD = 1,
}

/**
 * Describes the enum meshtastic.AdminMessage.BackupLocation.
 */
export const AdminMessage_BackupLocationSchema: GenEnum<AdminMessage_BackupLocation> = /*@__PURE__*/
  enumDesc(file_meshtastic_admin, 0, 2);

/**
 *
 * Parameters for setting up Meshtastic for ameteur radio usage
 *
 * @generated from message meshtastic.HamParameters
 */
export type HamParameters = Message<"meshtastic.HamParameters"> & {
  /**
   *
   * Amateur radio call sign, eg. KD2ABC
   *
   * @generated from field: string call_sign = 1;
   */
  callSign: string;

  /**
   *
   * Transmit power in dBm at the LoRA transceiver, not including any amplification
   *
   * @generated from field: int32 tx_power = 2;
   */
  txPower: number;

  /**
   *
   * The selected frequency of LoRA operation
   * Please respect your local laws, regulations, and band plans.
   * Ensure your radio is capable of operating of the selected frequency before setting this.
   *
   * @generated from field: float frequency = 3;
   */
  frequency: number;

  /**
   *
   * Optional short name of user
   *
   * @generated from field: string short_name = 4;
   */
  shortName: string;
};

/**
 * Describes the message meshtastic.HamParameters.
 * Use `create(HamParametersSchema)` to create a new message.
 */
export const HamParametersSchema: GenMessage<HamParameters> = /*@__PURE__*/
  messageDesc(file_meshtastic_admin, 1);

/**
 *
 * Response envelope for node_remote_hardware_pins
 *
 * @generated from message meshtastic.NodeRemoteHardwarePinsResponse
 */
export type NodeRemoteHardwarePinsResponse = Message<"meshtastic.NodeRemoteHardwarePinsResponse"> & {
  /**
   *
   * Nodes and their respective remote hardware GPIO pins
   *
   * @generated from field: repeated meshtastic.NodeRemoteHardwarePin node_remote_hardware_pins = 1;
   */
  nodeRemoteHardwarePins: NodeRemoteHardwarePin[];
};

/**
 * Describes the message meshtastic.NodeRemoteHardwarePinsResponse.
 * Use `create(NodeRemoteHardwarePinsResponseSchema)` to create a new message.
 */
export const NodeRemoteHardwarePinsResponseSchema: GenMessage<NodeRemoteHardwarePinsResponse> = /*@__PURE__*/
  messageDesc(file_meshtastic_admin, 2);

